# Build and (eventually) deploy
name: Build and deploy project

on:
  push:
    branches:
      - master

jobs:
  run_tests:
    name: Lint code and run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Java 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Run code linter and run unit tests
        run: ./gradlew check --rerun-tasks
  infrastructure:
    name: Deploy infrastructure changes
    needs: run_tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Node 16
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Install Pulumi CLI
        uses: pulumi/setup-pulumi@v2
        with:
          pulumi-version: ^3.4.0
      - name: Install Node dependencies
        run: npm ci
        env:
          NODE_ENV: production
        working-directory: ./infrastructure/
      - name: Execute Pulumi push
        uses: pulumi/actions@v3
        with:
          command: up
          stack-name: dev
          work-dir: ./infrastructure/
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Copy AppSpec.json to S3
        run: aws s3 cp codedeploy/appspec/AppSpec.json "s3://jokes-ecs-deploy/$(echo ${{ github.repository }} | grep "[^/]*$" -o)/AppSpec.json"
        env:
          NODE_ENV: production
        working-directory: ./infrastructure/
  deploy:
    name: Build and deploy project
    needs: infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Extract repository and branch name from context
        id: get-deploy-context
        run: |
          branch=$(echo ${{ github.ref }} | grep "[^/]*$" -o)
          echo "::set-output name=branch::$branch"
          service_name=$(echo ${{ github.repository }} | grep "[^/]*$" -o)
          echo "::set-output name=service_name::$service_name"
      - name: Checkout latest code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Java 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Build project, which checks style and runs tests
        run: ./gradlew build --rerun-tasks
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.get-deploy-context.outputs.branch }}-${{ github.sha }}
          SERVICE_NAME: ${{ steps.get-deploy-context.outputs.service_name }}
        run: |
          docker build -t "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG" . --platform linux/amd64
          docker push "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG"
          docker tag "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG" "$ECR_REGISTRY/$SERVICE_NAME:latest"
          docker push "$ECR_REGISTRY/$SERVICE_NAME:latest"
#      - name: Build, tag, and push image to Amazon ECR
#        env:
#          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          IMAGE_TAG: ${{ steps.get-deploy-context.outputs.branch }}-${{ github.sha }}
#          SERVICE_NAME: ${{ steps.get-deploy-context.outputs.service_name }}
#        run: |
#          ./scripts/uploadToEcr.sh skipAuthentication
      - name: Deploy with CodeDeploy
        env:
          SERVICE_NAME: ${{ steps.get-deploy-context.outputs.service_name }}
        run: |
          ./scripts/runCodeDeploy.sh skipAuthentication
