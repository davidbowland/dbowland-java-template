name: Pipeline

on:
  push:
    branches:
      - 'master'
      - 'feature**'

env:
  TEMPLATE_NAME: template.yaml
  TEMPLATE_NAME_ECR: template-ecr.yaml
  TESTING_SERVICE_NAME: java-template-test
  TESTING_STACK_NAME: java-template-test
  TESTING_STACK_NAME_ECR: java-template-ecr-test
  PROD_SERVICE_NAME: java-template
  PROD_STACK_NAME: java-template
  PROD_STACK_NAME_ECR: java-template-ecr

jobs:
  run-tests:
    name: Lint code and run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Java 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Run code linter and run unit tests
        run: ./gradlew check --rerun-tasks

  build-and-deploy-feature:
    name: Deploy feature branch
    if: startsWith(github.ref, 'refs/heads/feature')
    needs: [run-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v2
      - name: Install Python 2
        uses: actions/setup-python@v2
      - name: Install AWS SAM
        uses: aws-actions/setup-sam@v1

      - name: Install Java 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Build project, which checks style and runs tests
        run: ./gradlew build --rerun-tasks

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Deploy test ECR infrastructure
        shell: bash
        run: |
          sam deploy --stack-name ${{ env.TESTING_STACK_NAME_ECR }} \
            --template-file ${{ env.TEMPLATE_NAME_ECR }} \
            --region ${{ secrets.AWS_REGION }} \
            --no-fail-on-empty-changeset \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides 'AccountId=${{ secrets.AWS_ACCOUNT_ID }} Environment=test'
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
          SERVICE_NAME: dbowland/${{ env.TESTING_SERVICE_NAME }}
        run: |
          docker build -t "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG" . --platform linux/amd64
          docker push "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG"
      - name: Deploy test infrastructure
        shell: bash
        run: |
          sam deploy --stack-name ${{ env.TESTING_STACK_NAME }} \
            --template-file ${{ env.TEMPLATE_NAME }} \
            --region ${{ secrets.AWS_REGION }} \
            --no-fail-on-empty-changeset \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides 'AccountId=${{ secrets.AWS_ACCOUNT_ID }} Environment=test'

  deploy-testing:
    name: Deploy to test environment
    if: github.ref == 'refs/heads/master'
    needs: [run-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v2
      - name: Install Python 2
        uses: actions/setup-python@v2
      - name: Install AWS SAM
        uses: aws-actions/setup-sam@v1

      - name: Install Java 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Build project, which checks style and runs tests
        run: ./gradlew build --rerun-tasks

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Deploy test ECR infrastructure
        shell: bash
        run: |
          sam deploy --stack-name ${{ env.TESTING_STACK_NAME_ECR }} \
            --template-file ${{ env.TEMPLATE_NAME_ECR }} \
            --region ${{ secrets.AWS_REGION }} \
            --no-fail-on-empty-changeset \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides 'AccountId=${{ secrets.AWS_ACCOUNT_ID }} Environment=test'
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
          SERVICE_NAME: dbowland/${{ env.TESTING_SERVICE_NAME }}
        run: |
          docker build -t "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG" . --platform linux/amd64
          docker push "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG"
      - name: Deploy test infrastructure
        shell: bash
        run: |
          sam deploy --stack-name ${{ env.TESTING_STACK_NAME }} \
            --template-file ${{ env.TEMPLATE_NAME }} \
            --region ${{ secrets.AWS_REGION }} \
            --no-fail-on-empty-changeset \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides 'AccountId=${{ secrets.AWS_ACCOUNT_ID }} Environment=test'

  deploy-production:
    name: Deploy to production
    if: github.ref == 'refs/heads/master'
    needs: [deploy-testing]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v2
      - name: Install Python 2
        uses: actions/setup-python@v2
      - name: Install AWS SAM
        uses: aws-actions/setup-sam@v1

      - name: Install Java 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Build project, which checks style and runs tests
        run: ./gradlew build --rerun-tasks

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Deploy production ECR infrastructure
        shell: bash
        run: |
          sam deploy --stack-name ${{ env.PROD_STACK_NAME_ECR }} \
            --template-file ${{ env.TEMPLATE_NAME_ECR }} \
            --region ${{ secrets.AWS_REGION }} \
            --no-fail-on-empty-changeset \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides 'AccountId=${{ secrets.AWS_ACCOUNT_ID }}'
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
          SERVICE_NAME: dbowland/${{ env.PROD_SERVICE_NAME }}
        run: |
          docker build -t "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG" . --platform linux/amd64
          docker push "$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG"
      - name: Deploy production infrastructure
        shell: bash
        run: |
          sam deploy --stack-name ${{ env.PROD_STACK_NAME }} \
            --template-file ${{ env.TEMPLATE_NAME }} \
            --region ${{ secrets.AWS_REGION }} \
            --no-fail-on-empty-changeset \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides 'AccountId=${{ secrets.AWS_ACCOUNT_ID }}'
